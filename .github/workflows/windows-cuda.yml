name: Windows-CUDA

on:
  push:
    branches: [ main, "gpu*" ]
  pull_request:
    branches: [ main, "gpu*" ]

jobs:
  build-windows-cuda:
    strategy:
      matrix:
        include:
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Debug)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            configuration: Debug
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Release)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            configuration: Release
    env:
      CUDA_CACHE_ROOT: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA"

    runs-on: ${{ matrix.os }}
    name: 👾 Build - ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    # Install CUDA to the runner's env
    - name: "Cache: CUDA"
      uses: actions/cache@v2
      with:
        path: ${{ env.CUDA_CACHE_ROOT }}
        key: ${{ matrix.os }}_cuda-${{ matrix.cuda }}
    # todo: work with https://github.com/marketplace/actions/cuda-toolkit
    - name: "Install/Check: CUDA"
      shell: powershell
      env:
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
        CUDA_PATH: "${{ env.CUDA_CACHE_ROOT }}\\v11.3" # using fixed path
        CUDA_PATH_V11_3: "${{ env.CUDA_CACHE_ROOT }}\\v11.3"
      run: |
        Write-Output "$env:CUDA_CACHE_ROOT"
        # Install CUDA via a powershell script
        .\.github\workflows\scripts\actions\install_cuda_windows.ps1
        if((Test-Path "$env:CUDA_CACHE_ROOT") -eq $False){
        }
        $env:PATH="$env:CUDA_PATH\bin;$env:PATH"
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include
        Write-Output $(Get-Command nvcc).Path
    - name: "Setup: MSBuild"
      uses: microsoft/setup-msbuild@v1.0.2
    - name: "Configure CMake"
      shell: powershell
      run: |
        $env:PATH="$env:CUDA_PATH\\bin;$env:PATH"
        $NVCC_PATH=$(Get-Command nvcc).Path
        New-Item -Type Directory -Name build -Force
        Push-Location build
          cmake .. `
            -DCMAKE_GENERATOR_PLATFORM=x64 `
            -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} `
            -DBUILD_SHARED_LIBS=false `
            -DUSE_CUDA=ON -DCUDA_CRT_LINKAGE=dynamic -DCMAKE_CUDA_COMPILER="$NVCC_PATH"
        Pop-Location
      env:
        CUDA_PATH: "${{ env.CUDA_CACHE_ROOT }}\\v11.3" # using fixed path
        CUDA_PATH_V11_3: "${{ env.CUDA_CACHE_ROOT }}\\v11.3"
    - name: "Build with MSBuild"
      run: MSBuild.exe CubbyFlow.sln /p:Configuration=${{ matrix.configuration }}
      working-directory: ${{ github.workspace }}/build
