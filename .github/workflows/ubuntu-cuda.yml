name: Ubuntu-CUDA

on:
  push:
    branches: [ main, "gpu*" ]
  pull_request:
    branches: [ main, "gpu*" ]

jobs:
  build-ubuntu-cuda:
    strategy:
      matrix:
        include:
          - name: "Ubuntu 20.04 + gcc-10 + CUDA 11.7 (Disable Test)"
            os: ubuntu-20.04
            cuda: "11.7"
            compiler: gcc
            version: "10"

    runs-on: ${{ matrix.os }}
    name: 👾 Build - ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        source ./.github/workflows/scripts/actions/install_cuda_ubuntu.sh
        if [[ $? -eq 0 ]]; then
          # Set paths for subsequent steps, using ${CUDA_PATH}
          echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
          echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
          echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Install Packages
      run: sudo apt-get install -yq python3-setuptools
    - name: Configure Compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
        else
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
        fi
    - name: Configure Build
      run: mkdir build && cd build && cmake -DENABLE_CUDA=ON -DCMAKE_BUILD_TYPE=Release ..
    - name: Build
      run: cd build && make